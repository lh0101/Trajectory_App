# Generated from GCode.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,132,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,3,0,59,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,4,9,85,8,9,11,
        9,12,9,86,1,9,1,9,4,9,91,8,9,11,9,12,9,92,1,10,4,10,96,8,10,11,10,
        12,10,97,1,11,1,11,5,11,102,8,11,10,11,12,11,105,9,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        3,19,122,8,19,1,19,1,19,1,20,4,20,127,8,20,11,20,12,20,128,1,20,
        1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,
        4,1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,97,122,3,0,9,10,13,
        13,32,32,141,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,1,58,1,0,0,0,3,60,1,0,0,0,5,64,1,0,0,0,7,66,
        1,0,0,0,9,68,1,0,0,0,11,70,1,0,0,0,13,72,1,0,0,0,15,74,1,0,0,0,17,
        78,1,0,0,0,19,84,1,0,0,0,21,95,1,0,0,0,23,99,1,0,0,0,25,106,1,0,
        0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,112,1,0,0,0,33,114,1,0,0,0,
        35,116,1,0,0,0,37,118,1,0,0,0,39,121,1,0,0,0,41,126,1,0,0,0,43,44,
        5,71,0,0,44,45,5,48,0,0,45,59,5,48,0,0,46,47,5,71,0,0,47,48,5,48,
        0,0,48,59,5,49,0,0,49,50,5,71,0,0,50,51,5,48,0,0,51,59,5,50,0,0,
        52,53,5,71,0,0,53,54,5,48,0,0,54,59,5,51,0,0,55,56,5,71,0,0,56,57,
        5,48,0,0,57,59,5,52,0,0,58,43,1,0,0,0,58,46,1,0,0,0,58,49,1,0,0,
        0,58,52,1,0,0,0,58,55,1,0,0,0,59,2,1,0,0,0,60,61,5,77,0,0,61,62,
        5,51,0,0,62,63,5,48,0,0,63,4,1,0,0,0,64,65,2,88,89,0,65,6,1,0,0,
        0,66,67,2,73,74,0,67,8,1,0,0,0,68,69,5,80,0,0,69,10,1,0,0,0,70,71,
        5,78,0,0,71,12,1,0,0,0,72,73,5,84,0,0,73,14,1,0,0,0,74,75,5,86,0,
        0,75,76,5,65,0,0,76,77,5,82,0,0,77,16,1,0,0,0,78,79,5,70,0,0,79,
        80,5,85,0,0,80,81,5,78,0,0,81,82,5,67,0,0,82,18,1,0,0,0,83,85,7,
        0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
        88,1,0,0,0,88,90,5,46,0,0,89,91,7,0,0,0,90,89,1,0,0,0,91,92,1,0,
        0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,20,1,0,0,0,94,96,7,0,0,0,95,94,
        1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,22,1,0,0,0,
        99,103,7,1,0,0,100,102,7,2,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,
        101,1,0,0,0,103,104,1,0,0,0,104,24,1,0,0,0,105,103,1,0,0,0,106,107,
        5,45,0,0,107,26,1,0,0,0,108,109,5,61,0,0,109,28,1,0,0,0,110,111,
        5,123,0,0,111,30,1,0,0,0,112,113,5,125,0,0,113,32,1,0,0,0,114,115,
        5,40,0,0,115,34,1,0,0,0,116,117,5,41,0,0,117,36,1,0,0,0,118,119,
        5,44,0,0,119,38,1,0,0,0,120,122,5,13,0,0,121,120,1,0,0,0,121,122,
        1,0,0,0,122,123,1,0,0,0,123,124,5,10,0,0,124,40,1,0,0,0,125,127,
        7,3,0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,
        1,0,0,0,129,130,1,0,0,0,130,131,6,20,0,0,131,42,1,0,0,0,8,0,58,86,
        92,97,103,121,128,1,6,0,0
    ]

class GCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    GCODE = 1
    M30 = 2
    DIR = 3
    DELTA = 4
    P = 5
    N = 6
    T = 7
    VAR = 8
    FUNC = 9
    FLOAT = 10
    INT = 11
    ID = 12
    MINUS = 13
    ASSIGN = 14
    LBRACE = 15
    RBRACE = 16
    LPAREN = 17
    RPAREN = 18
    COMMA = 19
    LINE_END = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'M30'", "'P'", "'N'", "'T'", "'VAR'", "'FUNC'", "'-'", "'='", 
            "'{'", "'}'", "'('", "')'", "','" ]

    symbolicNames = [ "<INVALID>",
            "GCODE", "M30", "DIR", "DELTA", "P", "N", "T", "VAR", "FUNC", 
            "FLOAT", "INT", "ID", "MINUS", "ASSIGN", "LBRACE", "RBRACE", 
            "LPAREN", "RPAREN", "COMMA", "LINE_END", "WS" ]

    ruleNames = [ "GCODE", "M30", "DIR", "DELTA", "P", "N", "T", "VAR", 
                  "FUNC", "FLOAT", "INT", "ID", "MINUS", "ASSIGN", "LBRACE", 
                  "RBRACE", "LPAREN", "RPAREN", "COMMA", "LINE_END", "WS" ]

    grammarFileName = "GCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


